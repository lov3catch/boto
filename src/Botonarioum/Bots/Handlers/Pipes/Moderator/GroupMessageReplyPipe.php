<?php

declare(strict_types=1);

namespace App\Botonarioum\Bots\Handlers\Pipes\Moderator;

use App\Botonarioum\Bots\Handlers\Pipes\Moderator\BlockStrategies\Block;
use App\Botonarioum\Bots\Handlers\Pipes\Moderator\BlockStrategies\BlockAll;
use App\Botonarioum\Bots\Handlers\Pipes\Moderator\BlockStrategies\BlockAllGlobal;
use App\Botonarioum\Bots\Handlers\Pipes\Moderator\DTO\MessageDTO;
use App\Entity\ModeratorBanList;
use App\Entity\ModeratorGroupOwners;
use Doctrine\ORM\EntityManagerInterface;
use Formapro\TelegramBot\Bot;
use Formapro\TelegramBot\SendMessage;
use Formapro\TelegramBot\Update;

class GroupMessageReplyPipe extends MessagePipe
{
    private const BLOCK_STRATEGIES_FOR_USERS = [
        '/block',
        '/block-all',
    ];

    private const BLOCK_STRATEGIES_FOR_ADMIN = [
        '/block-all-global',
    ];

    /**
     * @var EntityManagerInterface
     */
    private $em;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->em = $entityManager;
    }

    public function processing(Bot $bot, Update $update): bool
    {
//        $bot->sendMessage(new SendMessage(
//            $update->getMessage()->getChat()->getId(),
//            'BAN'
//        ));
//
//        return true;

//        if ($update->getMessage()->getText() !== 'ban') return true;


        $message = new MessageDTO($update->getMessage());

        $user = $message->getReplyToMessage()->getFrom();
        $admin = $update->getMessage()->getFrom();
        $group = $update->getMessage()->getChat();

        $blockStrategies = [
            new Block($group, $user, $admin),
            new BlockAll($group, $user, $admin),
            new BlockAllGlobal($group, $user, $admin),
        ];

        $message = new MessageDTO($update->getMessage());

        $groupId = $update->getMessage()->getChat()->getId();
        $userId = $message->getReplyToMessage()->getFrom()->getId();
        $adminId = $update->getMessage()->getFrom()->getId();
        $expiredAt = time() + (60 * 60 * 24 * 30);
        $createdAt = time();

        $ban = new ModeratorBanList();
        $ban->setGroupId($groupId);
        $ban->setAdminId($adminId);
        $ban->setUserId($userId);
        $ban->setCreatedAt((new \DateTime())->setTimestamp($createdAt));
        $ban->setExpiredAt((new \DateTime())->setTimestamp($expiredAt));

        $this->em->persist($ban);
        $this->em->flush();

//        $fro

        $bot->sendMessage(new SendMessage(
            $update->getMessage()->getChat()->getId(),
            'Пользователь ' . $message->getReplyToMessage()->getFrom()->getFirstName() . ' получает бан.'
        ));

        return true;
    }

    public function isSupported(Update $update): bool
    {
//        return false;
        // todo: проверка группа ли это
        if (!parent::isSupported($update)) return false;

        $message = new MessageDTO($update->getMessage());

        if (!(bool)$message->getReplyToMessage()) return false;

        if (!in_array($update->getMessage()->getText(), array_merge(self::BLOCK_STRATEGIES_FOR_USERS, self::BLOCK_STRATEGIES_FOR_ADMIN))) {
            return false;
        }

        // check is from admin
        $groupId = $update->getMessage()->getChat()->getId();
        $adminId = ($this->em->getRepository(ModeratorGroupOwners::class)->findOneBy(['group_id' => $groupId]))->getPartnerId();

//        var_dump($adminId);
//        var_dump($update->getMessage()->getFrom()->getId());
//        die;

        if ((int)$adminId === (int)$update->getMessage()->getFrom()->getId()) return true;

        return false;

//        $update->getMessage()
//        return parent::isSupported($update); // TODO: Change the autogenerated stub
    }

}