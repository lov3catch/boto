<?php

declare(strict_types=1);

namespace App\Botonarioum\Bots\Handlers\Pipes\Moderator;

use App\Botonarioum\Bots\Handlers\Pipes\GroupMessagePipe as GroupMessagePipeAlias;
use App\Botonarioum\Bots\Handlers\Pipes\Moderator\DTO\ChatMemberDTO;
use App\Botonarioum\Bots\Handlers\Pipes\Moderator\DTO\MessageDTO;
use App\Entity\ModeratorGroupOwners;
use Doctrine\ORM\EntityManagerInterface;
use Formapro\TelegramBot\Bot;
use Formapro\TelegramBot\Update;

class RemoveBotFromGroupPipe extends GroupMessagePipeAlias
{
    /**
     * @var EntityManagerInterface
     */
    private $em;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->em = $entityManager;
    }

    public function processing(Bot $bot, Update $update): bool
    {
//        var_dump('11');die;
        // todo: переделать на эвент (как LogAddGroupOwner)

//        var_dump($update->getMessage());die;

        if (!$update->getMessage()) return true;

        if (!$update->getMessage()->getLeftChatMember()) return true;
//        if (!(new MessageDTO($update->getMessage()))->getLeftChatMember()) return true;

        /** @var ChatMemberDTO $leftChatMember */
        $leftChatMember = $update->getMessage()->getLeftChatMember();
//        $leftChatMember = (new MessageDTO($update->getMessage()))->getLeftChatMember();

//        var_dump($leftChatMember);die;

        if (!$leftChatMember->isBot()) return true;
        if (!('botosandbox_bot' === $leftChatMember->getUsername())) return true;

//        $update = $event->getUpdate();


//        var_dump($this->em->getRepository(ModeratorGroupOwners::class)->findOneBy(['group_id' => $update->getMessage()->getChat()->getId()]));die;
        try {
            $entity = $this->em->getRepository(ModeratorGroupOwners::class)->findOneBy(['group_id' => $update->getMessage()->getChat()->getId()]);

            $entity->setIsActive(false);

            $this->em->persist($entity);
            $this->em->flush();

//            var_dump('ok');
//            die;

        } catch (\Exception $exception) {
//            var_dump($exception);
//            die;
//            echo $exception->getMessage();
        }


//        $bot->sendMessage(new SendMessage(
//            $update->getMessage()->getChat()->getId(),
//            'REMOVE FROM GROUP'
//        ));

        return true;

//        return
    }

    public function isSupported(Update $update): bool
    {
        return parent::isSupported($update); // TODO: Change the autogenerated stub
    }

}